#!/usr/bin/perl
#
# Build something.
#
# Copyright (C) 2014 and later, Indie Computing Corp. All rights reserved. License: see package.
#

use strict;
use warnings;

use Getopt::Long;
use Macrobuild::CompositeTasks::Sequential;
use Macrobuild::Constants;
use Macrobuild::Task;
use Macrobuild::TaskRun;
use UBOS::Logging;
use UBOS::Utils;

my $verbose           = 0;
my $logConfigFile     = undef;
my $debug             = undef;
my $inputFile         = undef;
my $outputFile        = undef;
my $listShortcuts     = 0;
my $showShortcut      = undef;
my $recursive         = 0;
my $detail            = 0;
my $printVars         = 0;
my $dryRun            = 0;
my $help              = 0;

my $parseOk = GetOptions(
    'verbose+'        => \$verbose,
    'logConfig=s'     => \$logConfigFile,
    'debug'           => \$debug,
    'in=s'            => \$inputFile,
    'out=s'           => \$outputFile,
    'list-shortcuts'  => \$listShortcuts,
    'show-shortcut=s' => \$showShortcut,
    'recursive'       => \$recursive,
    'detail'          => \$detail,
    'print-vars'      => \$printVars,
    'dry-run|n'       => \$dryRun,
    'help'            => \$help );

if( $help ) {
    synopsisHelpQuit( 1 );
}
if(    !$parseOk
    || ( $listShortcuts && $printVars )
    || ( $showShortcut  && $printVars )
    || ( $listShortcuts && $showShortcut )
    || ( ( $recursive || $detail ) && !$listShortcuts && !$showShortcut ))
{
    synopsisHelpQuit();
}

UBOS::Logging::initialize( 'macrobuild', undef, $verbose, $logConfigFile, $debug, '/etc/macrobuild' );

my $inputJson = {};
if( $inputFile ) {
    unless( -r $inputFile ) {
        fatal( 'Cannot find or read input file:', $inputFile );
    }
    $inputJson = UBOS::Utils::readJsonFromFile( $inputFile );
    unless( $inputJson ) {
        fatal();
    }
}

# Init global settings

my ( $sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst ) = gmtime( time() );
my $constants = Macrobuild::Constants->new(
        'Global constants',
        {
            'tstamp' => ( sprintf "%.4d%.2d%.2d-%.2d%.2d%.2d", ($year+1900), ( $mon+1 ), $mday, $hour, $min, $sec )
        } );
for my $defaultsFile ( './settings.pl', './local.pl' ) { # leading ./ required
    if( -e $defaultsFile ) {
        $constants = Macrobuild::Constants->readAndCreate( $defaultsFile, $constants );
    }
}
my $allShortcuts = $constants->getAllValues( 'shortcuts' );

if( $printVars ) {
    my $vars = $constants->getAllNamedValuesWithAllValues();
    my $max = length( '(overridden)' ) + 2;
    foreach my $key ( keys %$vars ) {
        if( length( $key ) > $max ) {
            $max = length( $key );
        }
    }
    foreach my $key ( sort keys %$vars ) {
        my $values = $vars->{$key};
        printf "%-" . $max . "s: %s\n", $key, _var2string( $values->[0] );
        for( my $i=1 ; $i<@$values ; ++$i ) {
            printf "%" . $max . "s  %s\n", '(overridden)', _var2string( $values->[$i] );
        }
    }
    exit 0;
}

if( $listShortcuts || $showShortcut ) {
    if( @$allShortcuts ) {
        my $mergedShortcuts = {};
        for my $all ( @$allShortcuts ) {
            for my $key ( keys %$all ) {
                unless( exists( $mergedShortcuts->{$key} )) {
                    $mergedShortcuts->{$key} = $all->{$key};
                }
            }
        }

        use IO::Handle;
        STDOUT->autoflush; # make sure it appears before subroutine bails out in case of error

        if( $showShortcut ) {
            _printShortcuts( $mergedShortcuts, [ $showShortcut ], $detail, $recursive );
        } else {
            _printShortcuts( $mergedShortcuts, [ sort keys %$mergedShortcuts ], $detail, $recursive );
        }
    } else {
        print "No shortcut task names defined.\n";
    }
    exit 0;
}

# Now figure out the task(s) to run -- we either find the single task, or assemble a Sequential

my $rootTask = _parseArgvToTask( \@ARGV );
$rootTask->setResolver( $constants );

my $taskRun = Macrobuild::TaskRun->new( $inputJson, $rootTask );
my $exit    = $rootTask->run( $taskRun, $dryRun );

if( $exit < 0 ) {
    error( 'Aborting with error' );
    exit( $exit );
} elsif( $exit > 0 ) {
    info( 'Nothing to do.' );
    exit( 0 );
}

my $output = $taskRun->getOutput();
if( $outputFile ) {
    UBOS::Utils::writeJsonToFile( $outputFile, $output );
} elsif( keys %$output ) {
    UBOS::Utils::writeJsonToStdout( $taskRun->getOutput() );
}
exit( 0 );

#####
sub _parseArgvToTask {
    my $args = shift;

    my $retTask          = undef;
    my $sharedVars       = undef; # The ones before the first task has been mentioned
    my $currentTaskName  = undef;
    my $currentVars      = {};

    unless( ref( $args )) {
        $args = [ split( /\s+/, $args ) ]; # allow to use string instead of array if no further arguments
    }

    for my $arg ( @$args ) {
        $arg =~ s!^\s+!!;
        $arg =~ s!\s+$!!;
        if( $arg =~ m!^([^=]+)=(.*)$! ) {
            my( $key, $value ) = ( $1, $2 );
            if( exists( $currentVars->{$key} )) {
                unless( ref( $currentVars->{$key} )) {
                    # turn it into an array
                    $currentVars->{$key} = [ $currentVars->{$key} ];
                }
                push @{$currentVars->{$key}}, $value;
            } else {
                $currentVars->{$key} = $value;
            }
        } else {
            if( !$currentTaskName && %$currentVars ) { # we don't have a task yet (just about to get one), so this is env vars
                $sharedVars  = $currentVars;
                $currentVars = {};
            }
            if( $currentTaskName ) { # we just finished parsing a task
                my %mergedVars;
                if( $sharedVars ) {
                    %mergedVars = ( %$sharedVars , %$currentVars ); # current overwrites shared
                } else {
                    %mergedVars = ( %$currentVars );
                }

                my $newTask = _createTask( $currentTaskName, \%mergedVars );
                if( $retTask ) {
                    unless( ref $retTask eq 'Macrobuild::CompositeTasks::Sequential' ) {
                        my $newRetTask = Macrobuild::CompositeTasks::Sequential->new();
                        $newRetTask->appendTask( $retTask );
                        $retTask = $newRetTask;
                    }
                    $retTask->appendTask( $newTask );
                } else {
                    $retTask = $newTask;
                }

                $currentTaskName = undef;
                $currentVars     = {};
            }
            $currentTaskName = $arg;
        }
    }
    if( $currentTaskName ) {
        my %mergedVars;
        if( $sharedVars ) {
            %mergedVars = ( %$sharedVars , %$currentVars ); # current overwrites shared
        } else {
            %mergedVars = ( %$currentVars );
        }
        my $newTask = _createTask( $currentTaskName, \%mergedVars );
        if( $retTask ) {
            unless( ref $retTask eq 'Macrobuild::CompositeTasks::Sequential' ) {
                my $newRetTask = Macrobuild::CompositeTasks::Sequential->new();
                $newRetTask->appendTask( $retTask );
                $retTask = $newRetTask;
            }
            $retTask->appendTask( $newTask );
        } else {
            $retTask = $newTask;
        }
    } else {
        fatal( 'No task name(s) given' );
    }

    return $retTask;
}

#####
sub _createTask {
    my $taskName       = shift;
    my $vars           = shift;

    my $ret = undef;
    # shortcuts can be defined in all files, and don't override each other
    if( $allShortcuts ) {
        for my $shortcuts ( @$allShortcuts ) {
            if( exists( $shortcuts->{$taskName} )) {
                my @newArgs = @{$shortcuts->{$taskName}};
                push @newArgs, map { my $x = $_;
                                     ref( $vars->{$x} )
                                         ? ( map { "$x=$_" } @{$vars->{$x}} )
                                         : ( "$x=" . $vars->{$x} )
                                   } sort keys %$vars;
                $ret = _parseArgvToTask( \@newArgs );
                last;
            }
        }
    }
    unless( $ret ) {
        if( $taskName =~ m!::! ) {
            # Perl package name has been given as a task name
            eval "require $taskName" || fatal( 'Cannot load package', "$taskName\n", $@ );

        } else {
            my $fileName = $taskName;
            if( $fileName =~ m!^(.*)\.pm$! ) {
                $taskName = $1;
            } else {
                $fileName = "$fileName.pm";
            }
            eval "require '$fileName';" || fatal( 'Cannot read file', "$fileName\n", $@ );
            $taskName =~ s!/!::!g;
        }
        $ret = $taskName->new( %$vars );
    }
    return $ret;
}


#####
sub _var2string {
    my $s = shift;

    if( !defined( $s )) {
        return '<undef>';
    }
    if( ref( $s ) eq 'ARRAY' ) {
        return '[ ' . join( ', ', map { _var2string( $_ ) } @$s ) . ' ]';
    }
    if( ref( $s ) eq 'HASH' ) {
        return '[ ' . join( ', ', map { "$_ => " . _var2string( $s->{$_} ) } sort keys %$s ) . ' ]';
    }
    return $s;
}

#####
sub _printShortcuts {
    my $shortcuts = shift;
    my $names     = shift;
    my $detail    = shift || 0;
    my $recursive = shift || 0;
    my $indent    = shift || 0;

    my $indentString = '  ' x $indent;

    my $max = 8;
    if( $detail ) {
        foreach my $name ( @$names ) {
            if( length( $name ) > $max ) {
                $max = length( $name );
            }
        }
    }

    foreach my $name ( @$names ) {
        my $expansion = $shortcuts->{$name};
        if( $expansion ) {
            unless( ref( $expansion ) eq 'ARRAY' ) {
                $expansion = [ $expansion ];
            }
            my $value = join( ' ', @$expansion );

            if( $detail ) {
                printf "$indentString%-" . $max . "s => %s\n", $name, ( $value ? $value : '<empty>' );
            } else {
                printf "$indentString$name\n";
            }
            if( $recursive ) {
                _printShortcuts( $shortcuts, $expansion, $detail, 1, $indent+1 );
            }

        } elsif( $name =~ m!^[A-Z]! || $detail ) {
            # This is a hack. We really should cleanly distinguish between task names and arguments, not by whether something is uppercase or not
            printf "$indentString$name\n";
        }
    }
}

#####
sub synopsisHelpQuit {
    my $long = shift || 0;

    if( $long ) {
        print <<END;
macrobuild can be invoked as follows:

    macrobuild <task>
        Run a task. <task> is either a Perl module on the current path by
        that name, or the name of a shortcut defined in the settings.pl
        file.

    macrobuild <task> <key>=<value> ...
        Run a task. Prior to running, set the task's member variable <key>
        to <value>. Any number of key-value pairs may be given.

    macrobuild <task1> <key1>=<value1> ... <task2> <key2>=<value2> ...
        Run task <task1>, followed by <task2>. Prior to running, set each
        task's member variable(s) according to the key pairs following it
        until the next task is listed. Any number of tasks may be listed.

    macrobuild <key0=value0> <task1> <key1>=<value1> ... <task2> <key2>=<value2> ...
        Run as before, but set the value of <key0> to <value0> for all
        listed tasks. This is a shorthand notation.

The following optional arguments can be provided:

    --logConfig <file>
        Use an alternate log configuration file for this command.

    --verbose
        Display extra output. May be repeated for even more output.

    --in <file>
        Read and parse JSON file <file> and provide its content to the first
        task to be run as input

    --out <file>
        Do not write any resulting JSON output to the console, but write
        it to file <file> instead.

    --list-shortcuts [--recursive | --detail]
        Do not run any tasks. Show the known task shortcuts instead.
        Adding -v provides more detail.

    --show-shortcut <name> [--recursive | --detail]
        Show the expansion of the shortcut <name>.

    --print-vars
        Show all named values that are defined globally (not local to a
        task). If a variable refers to another, do not resolve the
        reference.

    --dry-run
        Do not run; only print what would be done if run.

    --help
        Display help.
END
    } else {
        print <<END;
macrobuild
END
    }
    exit( 0 );
}

1;
