#!/usr/bin/perl
#
# Build something.
#
# Copyright (C) 2014 and later, Indie Computing Corp. All rights reserved. License: see package.
#

use strict;
use warnings;

use Getopt::Long;
use IO::Handle;
use Macrobuild::CompositeTasks::Sequential;
use Macrobuild::Constants;
use Macrobuild::Task;
use Macrobuild::TaskRun;
use UBOS::Logging;
use UBOS::Utils;

my $verbose       = 0;
my $logConfigFile = undef;
my $debug         = undef;
my $listTasks     = 0;
my $showTask      = undef;
my $listVars      = 0;
my $dryRun        = 0;
my $help          = 0;

my $parseOk = GetOptions(
    'verbose+'    => \$verbose,
    'logConfig=s' => \$logConfigFile,
    'debug'       => \$debug,
    'list-tasks'  => \$listTasks,
    'show-task=s' => \$showTask,
    'list-vars'   => \$listVars,
    'dry-run|n'   => \$dryRun,
    'help'        => \$help );

if( $help ) {
    synopsisHelpQuit( 1 );
}
if(    !$parseOk
    || ( $listTasks && $listVars )
    || ( $showTask  && $listVars )
    || ( $listTasks && $showTask ))
{
    synopsisHelpQuit();
}

UBOS::Logging::initialize( 'macrobuild', undef, $verbose, $logConfigFile, $debug, '/etc/macrobuild' );

STDOUT->autoflush; # make sure it appears before subroutine bails out in case of error

# Init global settings

my ( $sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst ) = gmtime( time() );
my $constants = Macrobuild::Constants->new(
        'Global constants',
        {
            'tstamp' => ( sprintf "%.4d%.2d%.2d-%.2d%.2d%.2d", ($year+1900), ( $mon+1 ), $mday, $hour, $min, $sec )
        } );
for my $defaultsFile ( './settings.pl', './local.pl' ) { # leading ./ required
    if( -e $defaultsFile ) {
        $constants = Macrobuild::Constants->readAndCreate( $defaultsFile, $constants );
    }
}

my $tasks = eval "require './tasks.pl';" || fatal( "Cannot read file ./tasks.pl\n", $@ );

if( $listVars ) {
    info( 'Listing variables' );

    my $vars = $constants->getAllNamedValuesWithAllValues();
    my $max = length( '(overridden)' ) + 2;
    foreach my $key ( keys %$vars ) {
        if( length( $key ) > $max ) {
            $max = length( $key );
        }
    }
    foreach my $key ( sort keys %$vars ) {
        my $values = $vars->{$key};
        printf "%-" . ($max+1) . "s: %s\n", $key, _var2string( $values->[0] );
        for( my $i=1 ; $i<@$values ; ++$i ) {
            printf "%" . ($max+1) . "s  %s\n", '(overridden)', _var2string( $values->[$i] );
        }
    }
    exit 0;
}

if( $listTasks ) {
    info( 'Listing tasks' );

    if( keys %$tasks ) {
        foreach my $name ( sort keys %$tasks ) {
            print "$name\n";
        }
        exit 0;

    } else {
        fatal( 'No tasks have been defined' );
    }
}

if( $showTask ) {
    info( 'Showing task:', $showTask );

    my $taskDef = $tasks->{$showTask};
    if( $taskDef ) {
        if( ref( $taskDef ) eq 'ARRAY' && @$taskDef ) {
            printf( "%s =>\n", $showTask );
            foreach my $taskStep ( @$taskDef ) {
                if( ref( $taskStep ) eq 'ARRAY' && @$taskStep ) {
                    my $sep = "    ";
                    foreach my $cmdOrArg ( @$taskStep ) {
                        print( "$sep$cmdOrArg\n" );
                        $sep = "        ";
                    }
                } else {
                    print( "    $taskStep\n" );
                }
            }
        } else {
            printf( "%s => <noop>\n", $showTask );
        }
        exit 0;

    } else {
        fatal( "Task not known: $showTask\n" );
    }
}

# Now figure out the task(s) to run -- we either find the single task, or assemble a Sequential

my $rootTask = _determineTask( \@ARGV );
$rootTask->setResolver( $constants );

my $taskRun = Macrobuild::TaskRun->new( {}, $rootTask );
my $exit    = $rootTask->run( $taskRun, $dryRun );

if( $exit < 0 ) {
    error( 'Aborting with error' );
    exit( $exit );
} elsif( $exit > 0 ) {
    info( 'Nothing to do.' );
    exit( 0 );
}

exit( 0 );

#####
sub _determineTask {
    my $argsP = shift;

    my $ret = Macrobuild::CompositeTasks::Sequential->new();

    foreach my $taskDef ( @$argsP ) {

        my $newTask = undef;

        if( ref( $taskDef ) eq 'ARRAY' ) {
            if( @$taskDef ) {
                # task name plus optional arguments
                info( 'Expanding task:', $taskDef->[0] );

                $newTask = _createTask( @$taskDef );
            } else {
                info( 'No op task' );
            }

        } else {
            # task name without arguments
            info( 'Expanding task:', $taskDef );

            if( exists( $tasks->{$taskDef} )) {
                $newTask = _determineTask( $tasks->{$taskDef} );
            } else {
                $newTask = _createTask( $taskDef );
            }
        }

        if( $newTask ) {
            $ret->appendTask( $newTask );
        }

    }
    return $ret;
}

#####
sub _createTask {
    my $taskName = shift;
    my @vars     = @_;

    if( $taskName =~ m!::! ) {
        # Perl package name has been given as a task name
        eval "require $taskName" || fatal( 'Cannot load package', "$taskName\n", $@ );

    } else {
        my $fileName = $taskName;
        if( $fileName =~ m!^(.*)\.pm$! ) {
            $taskName = $1;
        } else {
            $fileName = "$fileName.pm";
        }
        eval "require '$fileName';" || fatal( 'Cannot read file', "$fileName\n", $@ );
        $taskName =~ s!/!::!g;
    }
    my %realVars = ();
    foreach my $pair ( @vars ) {
        if( $pair =~ /(.*)=(.*)/ ) {
            my( $key, $value ) = ( $1, $2 );
            if( !exists( $realVars{$key} ) ) {
                $realVars{$key} = $value;
            } elsif( ref( $realVars{$key} ) eq 'ARRAY' ) {
                push @{$realVars{$key}}, $value;
            } else {
                $realVars{$key} = [ $realVars{$key}, $value ];
            }
        } else {
            warning( "Cannot parse $pair, no =, skipping" );
        }
    }

    my $ret = $taskName->new( %realVars );

    return $ret;
}


#####
sub _var2string {
    my $s = shift;

    if( !defined( $s )) {
        return '<undef>';
    }
    if( ref( $s ) eq 'ARRAY' ) {
        return '[ ' . join( ', ', map { _var2string( $_ ) } @$s ) . ' ]';
    }
    if( ref( $s ) eq 'HASH' ) {
        return '[ ' . join( ', ', map { "$_ => " . _var2string( $s->{$_} ) } sort keys %$s ) . ' ]';
    }
    return $s;
}

#####
sub synopsisHelpQuit {
    my $long = shift || 0;

    if( $long ) {
        print <<END;
macrobuild can be invoked as follows:

    macrobuild <task> ...
        Run one or more tasks defined in tasks.pl.

The following optional arguments can be provided:

    --logConfig <file>
        Use an alternate log configuration file for this command.

    --verbose
        Display extra output. May be repeated for even more output.

    --list-tasks
        Do not run any tasks. Show the known tasks instead.

    --show-task <task>
        Show the expansion of the task <tasl>.

    --print-vars
        Show all named values that are defined globally (not local to a
        task). If a variable refers to another, do not resolve the
        reference.

    --dry-run
        Do not run; only print what would be done if run.

    --help
        Display help.
END
    } else {
        print <<END;
macrobuild
END
    }
    exit( 0 );
}

1;
